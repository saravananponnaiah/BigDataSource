package com.spark.assignment20

import org.apache.spark.SparkContext
import org.apache.spark.SparkContext._
import org.apache.log4j._
import org.apache.spark.sql.SparkSession
import org.apache.spark.sql.types._
import org.apache.spark.sql.types.{StructType, StructField, StringType}
import org.apache.spark.sql.Row
import org.apache.spark.sql.functions.udf

object Task2 {
  def main(args : Array[String]) : Unit = {
    Logger.getLogger("org").setLevel(Level.ERROR)
    
    val spark = SparkSession.builder.appName("Players").master("local").getOrCreate()
    import spark.implicits._
    
    val rddSports = spark.sparkContext.textFile("E:/Acadgild/Data/Sports_data.txt")
    val sportsHeader = rddSports.first()
    val filteredRddSports = rddSports.filter(row => row != sportsHeader)
       
    val schema = StructType(sportsHeader.split(",").map(fieldName => StructField(fieldName,StringType, true)))
    val rowDD = filteredRddSports.map(_.split(",")).map(x => Row(x(0), x(1), x(2), x(3), x(4),x(5),x(6)))
    val sportsDF = spark.createDataFrame(rowDD, schema)
    sportsDF.createOrReplaceTempView("sports_data")
    
    val getFullName = (fname : String, lname : String) => {
      "Mr." + fname.take(2) + lname
    }
    spark.udf.register("formFullName", getFullName)
    
  }
}